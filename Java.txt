Abstraction is a process of hiding the implementation details and showing only functionality to the user.

There are two ways to achieve abstraction in java
-> Abstract class (0 to 100%)
-> Interface (100%)


abstract classes

-> You want to share code among several closely related classes.
-> You expect that classes that extend your abstract class have many common methods or fields or require access modifiers other than public (such as protected and private).
-> You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong.

Interface
-> You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes.
-> You want to specify the behavior of a particular data type, but not concerned about who implements its behavior.
-> You want to take advantage of multiple inheritances.
----------------------------------------------
Abstract class can't be instantiated
Interfaces cannot be instantiated, but rather are implemented

=============================
Polymorphism -> compile-time polymorphism and (Runtime polymorphism or Dynamic Method Dispatch)
Before Learn Polymorphism -> A a=new B();//upcasting  

Runtime Polymorphism Example: 
class Bank{  
	float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
	float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
	float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
	float getRateOfInterest(){return 9.7f;}  
}  
class TestPolymorphism{  
	public static void main(String args[]){  
		Bank b;  
		b=new SBI();  
		System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
		b=new ICICI();  
		System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
		b=new AXIS();  
		System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
	}  
}  

=============================

Connecting a method call to the method body is known as binding.

There are two types of binding
-> Static Binding (also known as Early Binding).
-> Dynamic Binding (also known as Late Binding).


When type of the object is determined at compiled time(by the compiler), it is known as static binding.

(Inheritance A : B -> A a = new B();)When type of the object is determined at run-time, it is known as dynamic binding.

=============================
Thread-safety or thread-safe code in Java refers to code which can safely be used or shared in concurrent or multi-threading environment 
and they will behave as expected. any code, class, or object which can behave differently from its contract on the concurrent environment 
is not thread-safe.

Important points about Thread-Safety in Java

1) Immutable objects are by default thread-safe because their state can not be modified once created. Since String is immutable in Java, 
	its inherently thread-safe.
2) Read-only or final variables in Java are also thread-safe in Java.
3) Locking is one way of achieving thread-safety in Java.
4) Static variables if not synchronized properly become a major cause of thread-safety issues.
5) Example of thread-safe class in Java: Vector, Hashtable, ConcurrentHashMap, String etc.
6) Atomic operations in Java are thread-safe e.g. reading a 32-bit int from memory because its an atomic 
	operation it can't interleave with other threads.
7) local variables are also thread-safe because each thread has there own copy and using local 
	variables is a good way to write thread-safe code in Java.
8) In order to avoid thread-safety issues minimize the sharing of objects between multiple threads.
9) Volatile keyword in Java can also be used to instruct thread not to cache variables and 
	read from main memory and can also instruct JVM not to reorder or optimize code from threading perspective.

=============================
Collection framework provides flexibility, performance and robustness.

Asynchronize = Not-Thread Safe
Synchronize  = Thread Safe

HashTable/Vector = synchronized

Set(Hashset,TreeSet) 				-> unique elements
List(ArrayList, LinkedList, Vector) -> Ordered Sequence of elements can contain duplicate values, Index Based
Map(HashMap,TreeMap, HashTable) 	-> Key, Value -> Key have to be unique and not null

Set<Product> lst = new HashSet<Product>();
List<Product> lst = new ArrayList<Product>();
Map map=new HashMap();  
map.put(1,"Object1");


=== Both are interfaces ====

Comparable -> compareTo(null)
Comparator -> Comapare(Object obj1,Object obj2)

============================
ConcurrentModificationException (iterator.hasNext())-> one thread changes the collection while another thread is traversing

============================

1. Mutable object – You can change the states and fields after the object is created. For examples: StringBuilder,StringBuffer, java.util.Date and etc.
2. Immutable object – You cannot change anything after the object is created. For examples: String, boxed primitive objects like Integer, Long and etc.

============================
Shallow (==) -> return true, if the variable refrence points to the same object in memory   -> Fast
Deep (equals(Object b)) -> returns true, if object have same attributes						-> Slow/Memory Inexpensive

============================
Pass-by-Refrence/Pass-by-pointer -> will get copy of that data, pass-by-values
Refrence -> Modify the original object through copied refrence
Primitive -> modifies the copy k but not the original
============================
Serialization -> is a process of reading or writing an object. saving object state to a sequence of bytes. Affect performance

Note : Transient variable cannot be serialzed

Java Serial Version ID -> java.io.InvalidClassException
============================

Java I/O is defined in terms of abstract concept "stream", which is sequence of data.
1 : Byte Stream(8 bit) InputStream and OutputStream
2 : Character Stream (16 bit) Reader and Writer

============================

final class can't be extended
final method can't be override
final variable can't change


volatile modifier modified simultaneously by other threads.

volatile int number;

============================

Object to heap(Not Thread Safe)
Value to stack(Thread Safe)
============================

Type Casting means -> one type to another type.
============================
Covariant Return Type

The covariant return type specifies that the return type may vary in the same direction as the subclass.

class A{  
	A get(){return this;}  
}  
  
class B1 extends A{  
	B1 get(){
		return this;
	}  
	void message(){
		System.out.println("welcome to covariant return type");
	}  
  
	public static void main(String args[]){  
		new B1().get().message();  
	}  
}  

============================

Usage of Java super Keyword
-> super can be used to refer immediate parent class instance variable.
-> super can be used to invoke immediate parent class method.
-> super() can be used to invoke immediate parent class constructor.

============================

java -verbose:gc //reports on each garbage collection event.

============================

Error : dynamic linking failure in virtual machine occurs.
Exceptions : throw and catch
Runtime Exceptions(Uncheck Exception) : exception that occur within the Java Virtual Machine (During runtime)

============================
Process is an execution of a program (Multiple Threads)
Thread is a single execution sequence within the process.

Thread Class 
Runnable Interface

State of Thread (Runable, Running, Waiting, Sleeping, Blocked in (I/O), Block on sync, Dead)

Deamon Thread : Background Thread
=================================================

Observer(Notify) : any object that wishes to be notified when the state of another object changes.
Observable(Consume) : any object whose state may be of interest, and in whom another object may register an interest.

===================================================

Singleton
Factory

============================
Improve Performance 

1: Pool Valueable system resource  : threads, database connections, socket connects etc
2: Minimize network overheads : 

============================
Refresh your cache
1: Timed cache : strategy where the cache can be relenished periodically (eg : 30 min, hours)
2: Dirty check : your application is the only one which can mutate

============================
Refresh you cache when database is shared by more than one application

1: Database triggers
2: XML Messaging 
3: Optimize your I/O operations


============================
Detecting memory leaks
1: JProbe 
2: OptimizeIt

Operating System 

UNIX: PS, VMSTAT, IOSTAT, NETSTAT
=============================

Dr. Watson/Core Dump : OutOfMemoryError
Due to Heap Management
java -Xms1024M -Xmx1024M
java -XX:PermSize=256M -XX:MaxPermSize=256M

=============================
Component : Applets, Client Side Java Code, JSP, Servlet, Session Beans, War,Jar, Resource adapters
Service (is a component which can be accssed remotely) : Webservice, Msg

=============================

Service Oriented Architecture (SOA)
1: Component based Development
2: loosly coupled
3: Greater Code Resuse
4: Code is not tied to particular Database

============================
Session traking use cookies by default but if cookies are turned off use : Jsessionid=ADFAS#!@$#%FGSD123123123adsf

============================

Servlet Life-Cycle

int()
service()
destroy()

============================

HTTPServlet : HTTP Protocols
GenericServlet : Not use HTTP

============================

1 : Class.forName("")
2 : Connection con = DriverManager.getConnection("");
3 : Statement stmt = con.createStatement();
4 : ResultSet rs = stmt.executeQuery("Select * from TEST");
5 : while(rs.next()) rs.getString("col1"); 

============================
Statement 
PreparedStatement -> Complied

============================

Association - I have a relationship with an object. Foo uses Bar

public class Foo { 
    void Baz(Bar bar) {
    } 
};

--------------------------------------
Aggregation - I have an object which I've borrowed from someone else. When Foo dies, Bar may live on.

public class Foo { 
    private Bar bar; 
    Foo(Bar bar) { 
       this.bar = bar; 
    }
}


-> When use Aggregation?
-> Code reuse is also best achieved by aggregation when there is no is-a relationship.
-> Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; 
otherwise, aggregation is the best choice.

--------------------------------------
Composition - I own an object and I am responsible for its lifetime. When Foo dies, so does Bar

public class Foo {
    private Bar bar = new Bar(); 
}

============================
Java Process in Unix : ps -def | grep java
kill thread :  kill -3 <process-id>
unix stat tools/commands like : jvmstat, vmstat, iostat
active connection  : netstat -a | grep EST
Drive Statistics : iostat -E
cat file1.txt
du -k


==================================================

The cascade types supported by the Java Persistence Architecture are as below:

CascadeType.PERSIST : cascade type presist means that save() or persist() operations cascade to related entities.
CascadeType.MERGE : cascade type merge means that related entities are merged when the owning entity is merged.
CascadeType.REFRESH : cascade type refresh does the same thing for the refresh() operation.
CascadeType.REMOVE : cascade type remove removes all related entities association with this setting when the owning entity is deleted.
CascadeType.DETACH : cascade type detach detaches all related entities if a “manual detach” occurs.
CascadeType.ALL : cascade type all is shorthand for all of the above cascade operations.


==================================================
FetchType.EAGER : tells Hibernate to get all elements of a relationship when selecting the root entity
FetchType.LAZY: tells Hibernate to only fetch the related entities from the database when you use the relationship


Note: Hibernate handles the lazy initialization transparently and fetches the OrderItem entities as soon as the getter method gets called.


==================================================
One-to-One
==================================================
CREATE TABLE author (
  author_id int(11) NOT NULL AUTO_INCREMENT,
  name 		varchar(45) 	NOT NULL,
  email varchar(45) NOT NULL,
  PRIMARY KEY (author_id)
);
  
CREATE TABLE book (
  book_id int(11) NOT NULL AUTO_INCREMENT,
  title varchar(128) NOT NULL,
  description varchar(512) NOT NULL,
  published date NOT NULL,
  author_id int(11) NOT NULL,
  PRIMARY KEY (book_id),
  KEY author_fk (author_id),
  CONSTRAINT author_fk FOREIGN KEY (author_id) REFERENCES author (author_id)
);

@Entity
@Table(name = "author")
public class Author {
 
    @Id
    @GeneratedValue
    @Column(name = "author_id")
    private long id;
 
    @Column(name = "name")
    private String name;
 
    @Column(name = "email")
    private String email;
 
    public Author() { }
 
    public Author(String name, String email) {
        this.name = name;
        this.email = email;
    }
}

@Entity
@Table(name = "book")
public class Book {
 
    @Id
    @GeneratedValue
    @Column(name = "book_id")
    private long id;
 
    @Column(name = "title")
    private String title;
 
    @Column(name = "description")
    private String description;
 
    @Column(name = "published")
    private Date publishedDate;
 
    @JoinColumn(name = "author_id")
    @OneToOne(cascade = CascadeType.ALL)
    private Author author;
 

    public Author getAuthor() {
        return author;
    }
 
    public void setAuthor(Author author) {
        this.author = author;
    }
}


XML BASED : 

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 25 April 2011 7:52:33 PM by Hibernate Tools 3.4.0.CR1 -->
<hibernate-mapping>
	<class name="com.mkyong.library.Author" table="author" catalog="mkyongdb">
		<id name="author_id" type="java.lang.Integer">
			<column name="author_id" />
			<generator class="identity" />
		</id>
		<property name="name" type="string">
			<column name="name" length="10" not-null="true" />
		</property>
		<property name="email" type="string">
			<column name="email" length="20" not-null="true" />
		</property>
		<one-to-one name="stockDetail" class="com.mkyong.stock.StockDetail" cascade="save-update"></one-to-one>
	</class>
</hibernate-mapping>

<hibernate-mapping>
	<class name="com.mkyong.library.Book" table="book" catalog="mkyongdb">	
		<id name="book_id" type="java.lang.Integer">
			<column name="book_id" />
			<generator class="identity" />
		</id>	
		<id name="author_id" type="java.lang.Integer">
			<column name="author_id" />
			<generator class="foreign">
				<param name="property">author</param>
			</generator>
		</id>
		<one-to-one name="author" class="com.mkyong.library.Author" constrained="true" cascade="all"></one-to-one>
		
		<property name="title" type="string">
			<column name="title" length="100" not-null="true" />
		</property>
		<property name="description" type="string">
			<column name="description" not-null="true" />
		</property>
		<property name="published" type="string">
			<column name="published" not-null="true" />
		</property>
	</class>
</hibernate-mapping>


==================================================

=============================================
One-to-Many or Many to One
=============================================
@Entity
public class Item {
     
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fk_order")
    private PurchaseOrder order;
}    
@Entity
public class PurchaseOrder {
     
    @OneToMany(mappedBy = "order")
    private List<Item> items = new ArrayList<Item>();
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="net.codejava.hibernate">
    <class name="Item" table="Item">
        <id name="id" column="Item_ID">
            <generator class="native"/>
        </id>
        <property name="name" column="NAME" />
 
        <set name="products" inverse="true" cascade="all">
            <key column="CATEGORY_ID" not-null="true" />
            <one-to-many class="Product"/>
        </set>
    </class> 
</hibernate-mapping>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="net.codejava.hibernate">
    <class name="PurchaseOrder" table="PurchaseOrder">
        <id name="id" column="PurchaseOrder_ID">
            <generator class="native"/>
        </id>
         
        <many-to-one name="Item" class="Item" column="Item_ID" not-null="true"/>
    </class> 
</hibernate-mapping>


=============================================
Many-to-Many
=============================================
@Entity
@Table(name = "Employee")
public class Employee { 
    // ...
  
    @ManyToMany(cascade = { CascadeType.ALL })
    @JoinTable(
        name = "Employee_Project", 
        joinColumns = { @JoinColumn(name = "employee_id") }, 
        inverseJoinColumns = { @JoinColumn(name = "project_id") }
    )
    Set<Project> projects = new HashSet<>();
    
    // standard constructor/getters/setters
}
@Entity
@Table(name = "Project")
public class Project {    
    // ...  
  
    @ManyToMany(mappedBy = "projects")
    private Set<Employee> employees = new HashSet<>();
     
    // standard constructors/getters/setters   
}


<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.mkyong.stock.Employee" table="Employee" catalog="mkyongdb">
        <set name="project" table="Project"  inverse="false" lazy="true" fetch="select" cascade="all" >
            <key>
                <column name="Employee_ID" not-null="true" />
            </key>
            <many-to-many entity-name="com.mkyong.stock.Project">
                <column name="Project_ID" not-null="true" />
            </many-to-many>
        </set>
    </class>
</hibernate-mapping>


<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.mkyong.stock.Project" table="Project" catalog="mkyongdb">
        <set name="employee" table="Employee" inverse="true" lazy="true" fetch="select">
            <key>
                <column name="Project_ID" not-null="true" />
            </key>
            <many-to-many entity-name="com.mkyong.stock.Employee">
                <column name="Employee_ID" not-null="true" />
            </many-to-many>
        </set>
    </class>
</hibernate-mapping>



================================
There are 2 Level of Cache in Hibernate 
-> Session Level		-> The first level cache is the session cache. Objects are cached within the current session and they are only alive until the session is closed.
-> SessionFactory Level	-> The second level cache exists as long as the session factory is alive. Keep in mind that in case of Hibernate, second level cache is not a tree of objects; object instances are not cached, instead it stores attribute values.
-> Query Level			

-->	(EHCache and Infinispan)Enable through Configuration (Disabled by default)
-->	Cache Resultset of a query


@Configuration
public class HibernateConfiguration {
 
 @Value("#{dataSource}")
 private DataSource dataSource;
 
 @Bean
 public AnnotationSessionFactoryBean sessionFactoryBean() {
  Properties props = new Properties();
  props.put("hibernate.dialect", EnhancedMySQL5HibernateDialect.class.getName());
  props.put("hibernate.format_sql", "true");
  props.put("hibernate.show_sql", "true");
  props.put("hibernate.cache.provider_class", "org.hibernate.cache.EhCacheProvider");
  props.put("hibernate.cache.use_structured_entries", "true");
  props.put("hibernate.cache.use_query_cache", "true");
  props.put("hibernate.cache.use_second_level_cache", "true");
  props.put("hibernate.hbm2ddl.auto", "validate");
 
  AnnotationSessionFactoryBean bean = new AnnotationSessionFactoryBean();
  bean.setAnnotatedClasses(new Class[]{Dna.class});  
  bean.setHibernateProperties(props);
  bean.setDataSource(this.dataSource);
  bean.setSchemaUpdate(true);
  return bean;
 }
 
}

@Entity(name="dna")
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Dna {
....
}

================================

Get() -> to retrieve data that doesn’t exists, it returns null.
Load() -> we are able to print the id but as soon as we try to access other fields, it fires database query and throws 

=================
https://www.java4s.com/hibernate/hibernate-left-join-hibernate-left-join-example/
=================


SELECT *
FROM Employee Emp1
WHERE (N-1) = (
               SELECT COUNT(DISTINCT(Emp2.Salary))
               FROM Employee Emp2
               WHERE Emp2.Salary > Emp1.Salary
               )
-----------------------------
 SELECT EmpID, EmpName, EmpSalary,
           RN = ROW_NUMBER() OVER (ORDER BY EmpSalary DESC)
    FROM dbo.Salary
-----------------------------
SELECT TOP 1 salary
FROM (
      SELECT DISTINCT TOP n salary
      FROM employee
      ORDER BY salary DESC
      ) a
ORDER BY salary


=============================
import java.util.Arrays;
Arrays.sort(data, Collections.reverseOrder());

Arrays.sort(W, Comparator.comparingInt(String::length));



============================
Whats new in Java 8

1: Functional Programming
	- Higher-order functions: In functional programming, functions are to be considered as first-class citizens. That is, so far in the legacy style of coding, we can do below stuff with objects. 
		We can pass objects to a function.
		We can create objects within function.
		We can return objects from a function.
		We can pass a function to a function.
		We can create a function within function.
		We can return a function from a function.
	- Pure functions: A function is called pure function if it always returns the same result for same argument values and it has no side effects like modifying an argument (or global variable) or outputting something.
    - Lambda expressions: A Lambda expression is an anonymous method that has mutability at very minimum and it has only a parameter list and a body. The return type is always inferred based on the context. Also, make a note, Lambda expressions work in parallel with the functional interface. 
		The syntax of a lambda expression is: (parameter) -> body

// anonymous method
Runnable r = new Runnable() {
            public void run()
            {
                System.out.println(
                    "Running in Runnable thread");
            }
        };

// Java 8 program to demonstrate
// a lambda expression
 Runnable r = () -> System.out.println("Running in Runnable thread");
 
 
============================

default method-

    Default methods can have access specified as public only. They cannot be declared as protected or private. Also since all interfaces are public by default, decalring the default methods as public explicitly is not required.
    Default methods cannot be abstract and should always have the method body.
    The class implementing the Interface having default method can override it.
    Default methods cannot be Final or Synchronized.
    Static methods can never be default methods. Default methods are always instance methods.


Class Employee
{
default void showName()
{
System.out.println("employee")
}
}

============================

Stream operations can be divided in two parts-
- Intermediate operations- Intermediate operations which return another Stream which allows operations to be connected in a form of a query
- Terminal operations- Terminal operations produces a non-stream, result such as primitive value, a collection or no value at all.

============================

Optional in Java 8?
A: 	Java 8 introduced a new container class java.util.Optional<T>. 
	It wraps a single value, if that value is available. 
	If the value is not available an empty optional should be returned. 
	Thus it represents null value with absent value. 
	This class has various utility methods like isPresent() which helps users to avoid making use of null value checks. 
	So instead of returning the value directly, a wrapper object is returned thus users can avoid the null pointer exception.

============================

https://www.javainuse.com/spring/spring-design-patterns


https://www.javainuse.com/java/java_data
============================
https://github.com/gnodivad/java-the-complete-reference



